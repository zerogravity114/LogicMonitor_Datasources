<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1565041352</version>
        <name>Veeam_BackupAndReplication_RestorePoints_Backup</name>
        <displayedas>Veeam Restore Points: Backup</displayedas>
        <description></description>
        <collector>script</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>1800</schedule>
        <appliesTo>false();</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>&#60;# © 2007-2019 - LogicMonitor, Inc.  All rights reserved. #&#62;

$hostname               = &#39;##system.hostname##&#39;

# If the hostname is an IP address query DNS for the FQDN
if($hostname -match &#34;\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b&#34;){
    $hostname = [System.Net.Dns]::GetHostbyAddress($hostname).HostName
}

if ([string]::IsNullOrEmpty(&#39;##veeam.user##&#39;)) { $veeam_user = &#39;##wmi.user##&#39; } else { $veeam_user = &#39;##veeam.user##&#39; }
if ([string]::IsNullOrEmpty(&#39;##veeam.pass##&#39;)) { $veeam_pass = &#39;##wmi.pass##&#39; } else { $veeam_pass = &#39;##veeam.pass##&#39; }

## ******** Beginning of LM Helper Methods *****************************************************************************************

function Make-NotNaN {
    param( $Metric )

    if ( [string]::IsNullOrEmpty($Metric) -or [string]::IsNullOrWhiteSpace($Metric) ) {
        return &#34;0&#34; 
    } else {
        return $Metric 
    }
}

function Get-LMActiveDiscoveryOutput {
    Param (
        # Custom Hashtable of Objects representing the Veeam Jobs.
        [Parameter(Mandatory = $true)]
        $VeeamObjects
    )

    $lm_output = &#34;&#34;

    # Now Print out the AD-Formatted output
    ForEach ($VeeamObject in $VeeamObjects) {
           $tmp_VmID = $VeeamObject.ObjectID
           $tmp_VmName = $VeeamObject.VmName
           $tmp_Location = $VeeamObject.Location
           $tmp_propprefix = &#34;auto.veeam.backupandreplication&#34;
        
        $lm_output += &#34;$($tmp_VmID)##$($tmp_VmName)##$($tmp_Location)####$($tmp_propprefix).vmobjectid=$($tmp_VmID)&#38;$($tmp_propprefix).virtualmachinename=$($tmp_VmName)&#38;$($tmp_propprefix).vmlocation=$($tmp_Location)`n&#34;

    }

return $lm_output
}

## ******** Beginning of LM Helper Methods *********************************************************************************************

function Get-VeeamConnection {
    Param (
        # Hostname of the Veeam Server we are connecting to.
        [Parameter(Mandatory = $true)]
        [string]
        $VeeamHostname,

        # Veeam Username
        [Parameter(Mandatory = $true)]
        [string]
        $VeeamUsername,

        # Veeam Password
        [Parameter(Mandatory = $true)]
        [String]
        $VeeamPassword
    )

    $max_attempts = 2
    $attempt_sleep = 2
    $current_attempt_count = 0

    ## Build credential object
    If (($VeeamUsername -like &#34;*veeam.user*&#34;) -or ($VeeamUsername -like &#34;*wmi.user*&#34;)) {
        # The user has not provided any creds. Let&#39;s try with whatever user this thing has.
        while (-Not$veeam_session -and ($current_attempt_count -le $max_attempts)) {
            $current_attempt_count++
            $veeam_session = New-PSSession -ComputerName $VeeamHostname
            Start-Sleep -Seconds $attempt_sleep
        }
    }

    else {
        $secure_pass = ConvertTo-SecureString -String $VeeamPassword -AsPlainText -Force
        $creds = New-Object -typename System.Management.Automation.PSCredential($VeeamUsername, $secure_pass)

        ## Attempt to acquire a persistent session object.  Keep trying until we hit the $max_attempts value.
        while (-Not$veeam_session -and ($current_attempt_count -le $max_attempts)) {
            $current_attempt_count++
            $veeam_session = New-PSSession -ComputerName $VeeamHostname -Credential $creds
            Start-Sleep -Seconds $attempt_sleep
        }
    }

    ## Ensure that the session was successfully created, otherwise exit.
    if ( -Not $veeam_session ) {
        Write-Host &#34;Error connecting session.  Terminating.&#34;
        Exit
    }

    return $veeam_session
}

function Get-VeeamVirtualMachines {
    
    Param (
        # Veeam Session Object
        [Parameter(Mandatory = $true)]
        [System.Management.Automation.Runspaces.PSSession]
        $VeeamSession
        
    )

    $tmp_veeam_objects = @()

    ## Make the call to the Veeam PS cmdlet to retrieve the backup jobs
    $vjs = Invoke-Command -Session $VeeamSession -ScriptBlock {
        Add-PSSnapin -Name VeeamPSSnapIn -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
        
   
        $RemoteJobs = Get-VBRJob -WarningAction SilentlyContinue | Where-Object { $_.JobType -eq &#34;Backup&#34; } | Select-Object -Property *
        ForEach ($Job in $RemoteJobs) {Get-VBRJobObject -Job $Job.Name | ? {$_.Type -eq &#34;Include&#34;}}
    
    }



## VBuild an array of Virtual Machines Instances by checking each job for included VMs
foreach ($vjob in $vjs) {
    
    $new_veeam_vm = New-Object -TypeName psobject
    $new_veeam_vm | Add-Member NoteProperty -Name ObjectID -Value $vjob.ObjectId
    $new_veeam_vm | Add-Member NoteProperty -Name VmName -Value $vjob.Name
    $new_veeam_vm | Add-Member NoteProperty -Name Location -Value $vjob.Location

    $tmp_veeam_objects += $new_veeam_vm



}

return $tmp_veeam_objects
}




## ******** Beginning of the main routine *********************************************************************************************
# Add-PSSnapin -Name VeeamPSSnapIn -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
$veeam_session = Get-VeeamConnection -VeeamHostname $hostname -VeeamUsername $veeam_user -VeeamPassword $veeam_pass

$veeam_objects = Get-VeeamVirtualMachines -VeeamSession $veeam_session

Write-Host ( Get-LMActiveDiscoveryOutput -VeeamObjects $veeam_objects )

Exit
</wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology></technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"powerShell","groovyscript":"<# © 2007-2019 - LogicMonitor, Inc.  All rights reserved. #>\n\n$hostname               = '##system.hostname##'\n\n# If the hostname is an IP address query DNS for the FQDN\nif($hostname -match \"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b\"){\n    $hostname = [System.Net.Dns]::GetHostbyAddress($hostname).HostName\n}\n\nif ([string]::IsNullOrEmpty('##veeam.user##')) { $veeam_user = '##wmi.user##' } else { $veeam_user = '##veeam.user##' }\nif ([string]::IsNullOrEmpty('##veeam.pass##')) { $veeam_pass = '##wmi.pass##' } else { $veeam_pass = '##veeam.pass##' }\n\n## ******** Beginning of LM Helper Methods *****************************************************************************************\n\nfunction Make-NotNaN {\n    param( $Metric )\n\n    if ( [string]::IsNullOrEmpty($Metric) -or [string]::IsNullOrWhiteSpace($Metric) ) {\n        return \"0\" \n    } else {\n        return $Metric \n    }\n}\n\nfunction Get-LMActiveDiscoveryOutput {\n    Param (\n        # Custom Hashtable of Objects representing the Veeam Jobs.\n        [Parameter(Mandatory = $true)]\n        $VeeamObjects\n    )\n\n    $lm_output = \"\"\n\n    # Now Print out the AD-Formatted output\n    ForEach ($VeeamObject in $VeeamObjects) {\n           $tmp_VmID = $VeeamObject.ObjectID\n           $tmp_VmName = $VeeamObject.VmName\n           $tmp_Location = $VeeamObject.Location\n           $tmp_propprefix = \"auto.veeam.backupandreplication\"\n        \n        $lm_output += \"$($tmp_VmID)##$($tmp_VmName)##$($tmp_Location)####$($tmp_propprefix).vmobjectid=$($tmp_VmID)&$($tmp_propprefix).virtualmachinename=$($tmp_VmName)&$($tmp_propprefix).vmlocation=$($tmp_Location)`n\"\n\n    }\n\nreturn $lm_output\n}\n\n## ******** Beginning of LM Helper Methods *********************************************************************************************\n\nfunction Get-VeeamConnection {\n    Param (\n        # Hostname of the Veeam Server we are connecting to.\n        [Parameter(Mandatory = $true)]\n        [string]\n        $VeeamHostname,\n\n        # Veeam Username\n        [Parameter(Mandatory = $true)]\n        [string]\n        $VeeamUsername,\n\n        # Veeam Password\n        [Parameter(Mandatory = $true)]\n        [String]\n        $VeeamPassword\n    )\n\n    $max_attempts = 2\n    $attempt_sleep = 2\n    $current_attempt_count = 0\n\n    ## Build credential object\n    If (($VeeamUsername -like \"*veeam.user*\") -or ($VeeamUsername -like \"*wmi.user*\")) {\n        # The user has not provided any creds. Let's try with whatever user this thing has.\n        while (-Not$veeam_session -and ($current_attempt_count -le $max_attempts)) {\n            $current_attempt_count++\n            $veeam_session = New-PSSession -ComputerName $VeeamHostname\n            Start-Sleep -Seconds $attempt_sleep\n        }\n    }\n\n    else {\n        $secure_pass = ConvertTo-SecureString -String $VeeamPassword -AsPlainText -Force\n        $creds = New-Object -typename System.Management.Automation.PSCredential($VeeamUsername, $secure_pass)\n\n        ## Attempt to acquire a persistent session object.  Keep trying until we hit the $max_attempts value.\n        while (-Not$veeam_session -and ($current_attempt_count -le $max_attempts)) {\n            $current_attempt_count++\n            $veeam_session = New-PSSession -ComputerName $VeeamHostname -Credential $creds\n            Start-Sleep -Seconds $attempt_sleep\n        }\n    }\n\n    ## Ensure that the session was successfully created, otherwise exit.\n    if ( -Not $veeam_session ) {\n        Write-Host \"Error connecting session.  Terminating.\"\n        Exit\n    }\n\n    return $veeam_session\n}\n\nfunction Get-VeeamVirtualMachines {\n    \n    Param (\n        # Veeam Session Object\n        [Parameter(Mandatory = $true)]\n        [System.Management.Automation.Runspaces.PSSession]\n        $VeeamSession\n        \n    )\n\n    $tmp_veeam_objects = @()\n\n    ## Make the call to the Veeam PS cmdlet to retrieve the backup jobs\n    $vjs = Invoke-Command -Session $VeeamSession -ScriptBlock {\n        Add-PSSnapin -Name VeeamPSSnapIn -WarningAction SilentlyContinue -ErrorAction SilentlyContinue\n        \n   \n        $RemoteJobs = Get-VBRJob -WarningAction SilentlyContinue | Where-Object { $_.JobType -eq \"Backup\" } | Select-Object -Property *\n        ForEach ($Job in $RemoteJobs) {Get-VBRJobObject -Job $Job.Name | ? {$_.Type -eq \"Include\"}}\n    \n    }\n\n\n\n## VBuild an array of Virtual Machines Instances by checking each job for included VMs\nforeach ($vjob in $vjs) {\n    \n    $new_veeam_vm = New-Object -TypeName psobject\n    $new_veeam_vm | Add-Member NoteProperty -Name ObjectID -Value $vjob.ObjectId\n    $new_veeam_vm | Add-Member NoteProperty -Name VmName -Value $vjob.Name\n    $new_veeam_vm | Add-Member NoteProperty -Name Location -Value $vjob.Location\n\n    $tmp_veeam_objects += $new_veeam_vm\n\n\n\n}\n\nreturn $tmp_veeam_objects\n}\n\n\n\n\n## ******** Beginning of the main routine *********************************************************************************************\n# Add-PSSnapin -Name VeeamPSSnapIn -WarningAction SilentlyContinue -ErrorAction SilentlyContinue\n$veeam_session = Get-VeeamConnection -VeeamHostname $hostname -VeeamUsername $veeam_user -VeeamPassword $veeam_pass\n\n$veeam_objects = Get-VeeamVirtualMachines -VeeamSession $veeam_session\n\nWrite-Host ( Get-LMActiveDiscoveryOutput -VeeamObjects $veeam_objects )\n\nExit\n"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>&#60;# © 2007-2019 - LogicMonitor, Inc.  All rights reserved. #&#62;

$hostname               = &#39;##system.hostname##&#39;

# If the hostname is an IP address query DNS for the FQDN
if($hostname -match &#34;\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b&#34;){
    $hostname = [System.Net.Dns]::GetHostbyAddress($hostname).HostName
}

if ([string]::IsNullOrEmpty(&#39;##veeam.user##&#39;)) { $veeam_user = &#39;##wmi.user##&#39; } else { $veeam_user = &#39;##veeam.user##&#39; }
if ([string]::IsNullOrEmpty(&#39;##veeam.pass##&#39;)) { $veeam_pass = &#39;##wmi.pass##&#39; } else { $veeam_pass = &#39;##veeam.pass##&#39; }

[datetime]$EpochStart = Get-Date &#34;01/01/1970&#34;
[datetime]$Now = Get-Date

$VmId = &#34;##WILDVALUE##&#34;


## ******** Beginning of LM Helper Methods *****************************************************************************************

function Make-NotNaN {
    param( $Metric )

    if ( [string]::IsNullOrEmpty($Metric) -or [string]::IsNullOrWhiteSpace($Metric) ) {
        return &#34;0&#34; 
    } else {
        return $Metric 
    }
}


function Get-VeeamConnection {
    Param (
        # Hostname of the Veeam Server we are connecting to.
        [Parameter(Mandatory = $true)]
        [string]
        $VeeamHostname,

        # Veeam Username
        [Parameter(Mandatory = $true)]
        [string]
        $VeeamUsername,

        # Veeam Password
        [Parameter(Mandatory = $true)]
        [String]
        $VeeamPassword
    )

    $max_attempts = 2
    $attempt_sleep = 2
    $current_attempt_count = 0

    ## Build credential object
    If (($VeeamUsername -like &#34;*veeam.user*&#34;) -or ($VeeamUsername -like &#34;*wmi.user*&#34;)) {
        # The user has not provided any creds. Let&#39;s try with whatever user this thing has.
        while (-Not$veeam_session -and ($current_attempt_count -le $max_attempts)) {
            $current_attempt_count++
            $veeam_session = New-PSSession -ComputerName $VeeamHostname
            Start-Sleep -Seconds $attempt_sleep
        }
    }

    else {
        $secure_pass = ConvertTo-SecureString -String $VeeamPassword -AsPlainText -Force
        $creds = New-Object -typename System.Management.Automation.PSCredential($VeeamUsername, $secure_pass)

        ## Attempt to acquire a persistent session object.  Keep trying until we hit the $max_attempts value.
        while (-Not$veeam_session -and ($current_attempt_count -le $max_attempts)) {
            $current_attempt_count++
            $veeam_session = New-PSSession -ComputerName $VeeamHostname -Credential $creds
            Start-Sleep -Seconds $attempt_sleep
        }
    }

    ## Ensure that the session was successfully created, otherwise exit.
    if ( -Not $veeam_session ) {
        Write-Host &#34;Error connecting session.  Terminating.&#34;
        Exit
    }

    return $veeam_session
}

function Sanitize-Output {
    param($Metric)
    if ($Metric.GetType() -eq [Boolean]) {
        return [int]$Metric

    }

    if ([string]::IsNullOrEmpty($Metric) -or [string]::IsNullOrWhiteSpace($Metric)) {
        return &#34;null&#34;
    } else {
        return $Metric
    }
}

### End of LM Helper Methods

Function Get-VeeamRestorePoints {
    Param (
        # GUID of the Veeam Virtual Machine.
        [Parameter(Mandatory = $true)]
        [string]
        $VmId,

        $VeeamSession

    )

    $tmp_veeam_objects = @()
    # Retrieve the restore points
    $RestorePoints = Invoke-Command -Session $VeeamSession -ScriptBlock {
        Add-PSSnapin -Name VeeamPSSnapIn -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
        Get-VBRRestorePoint -ObjectId $using:VmId
    }
    # Find the Full restore points and count them.  Excluded &#34;inconsistent/incomplete&#34; fulls
    $Fulls = $RestorePoints | ? {$_.Type -eq &#34;Full&#34;} | ? {$_.IsConsistent -eq &#34;True&#34;}
    $FullCount = $Fulls.Count

    # Find the backup increments and cound them. Exclude &#34;inconsistent/incomplete&#34; increments
    $Increments = $RestorePoints | ? {$_.Type -eq &#34;Increment&#34;} | ? {$_.IsConsistent -eq &#34;True&#34;}
    $IncrementCount = $Increments.Count

    # Sort the fulls so we can pull the newest and oldest
   $Fulls = $Fulls | Sort-Object CreationTimeUtc
   $OldestFull = $Fulls | Select-Object -First 1
   $NewestFull = $Fulls | Select-Object -Last 1
   
   # Find the creationdata of the oldest full and return in in epoch time
   [datetime]$OldFullCreationUtc = $OldestFull.CreationTimeUtc
   #[int64]$OldFullEpochTime = (New-Timespan -Start $EpochStart -End $OldFullCreationUtc).TotalSeconds
   [int64]$OldFullAgeSec = (New-Timespan -Start $OldFullCreationUtc -End $Now).TotalSeconds

   # Find the creationdate of the newest full and return it in Unix Epoch time
   [datetime]$NewFullCreationUtc = $NewestFull.CreationTimeUtc
   # [int64]$NewFullEpochTime = (New-TimeSpan -Start $EpochStart -End $NewFullCreationUtc).TotalSeconds
   [int64]$NewFullAgeSec = (New-Timespan -Start $NewFullCreationUtc -End $Now).TotalSeconds
   

   # Sort the incremenets so we can pull the newest and oldest
   $Increments = $Increments | Sort-Object CreationTimeUtc
   $OldestIncrement = $Increments | Select-Object -First 1
   $NewestIncrement = $Increments | Select-Object -Last 1

   #Find the creationdate of the oldest increment and return in epoch time
   [datetime]$OldIncrementCreationUtc = $OldestIncrement.CreationTimeUtc
   # [int64]$OldIncEpochTime = (New-Timespan -Start $EpochStart -End $OldIncrementCreationUtc).TotalSeconds
   [int64]$OldIncAgeSec = (New-Timespan -Start $OldIncrementCreationUtc -End $Now).TotalSeconds


   # Find the creationdate of the newest increment and return in epoch time
   [datetime]$NewIncrementCreationUtc = $NewestIncrement.CreationTimeUtc
   # [int64]$NewIncEpochTime = (New-TimeSpan -Start $EpochStart -End $NewIncrementCreationUtc).TotalSeconds
   [int64]$NewIncAgeSec = (New-Timespan -Start $NewIncrementCreationUtc -End $Now).TotalSeconds

   # Write out the data to return to Logicmonitor
   # Write-Host &#34;$( $wildvalue ).Status=$( Sanitize-Output $task.Status )&#34;

   Write-Host &#34;$( $VmId ).FullCount=$( Sanitize-Output $FullCount )&#34;
   Write-Host &#34;$( $VmId ).IncCount=$( Sanitize-Output $IncrementCount )&#34;
   Write-Host &#34;$( $VmId ).OldestFull=$( Sanitize-Output $OldFullAgeSec )&#34;
   Write-Host &#34;$( $VmId ).NewestFull=$( Sanitize-Output $NewFullAgeSec )&#34;
   Write-Host &#34;$( $VmId ).OldestIncrement=$( Sanitize-Output $OldIncAgeSec )&#34;
   Write-Host &#34;$( $VmId ).NewestIncrement=$( Sanitize-Output $NewIncAgeSec )&#34;

}


## ******** Beginning of the main routine *********************************************************************************************
$veeam_session = Get-VeeamConnection -VeeamHostname $hostname -VeeamUsername $veeam_user -VeeamPassword $veeam_pass
$veeam_objects = Get-VeeamRestorePoints -VmId $VmId -VeeamSession $veeam_session

Exit</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>IncCount</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.IncCount</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A count of the number of simple restore points (increments) found for the associated instance.</description>
            <maxvalue></maxvalue>
            <minvalue>0</minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>FullCount</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.FullCount</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>A count of completed full backup points found for the associated instance.</description>
            <maxvalue></maxvalue>
            <minvalue>0</minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>NewestFull</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.NewestFull</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The age of the  newest complete full restore point found for a given instance expressed in seconds.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>NewestIncrement</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.NewestIncrement</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The age of the newest complete simple/incremental restore point found for a given instance expressed in seconds.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>OldestFull</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.OldestFull</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The age of the oldest complete full restore point found for a given instance expressed in seconds.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>OldestIncrement</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.OldestIncrement</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>The age of the oldest complete simple/incremental restore point found for a given instance expressed in seconds.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>NewestFullAgeHours</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>expression</postprocessormethod>
            <postprocessorparam>NewestFull/3600</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>NewestIncrementHours</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>expression</postprocessormethod>
            <postprocessorparam>NewestIncrement/3600</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>OldestFullHours</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>expression</postprocessormethod>
            <postprocessorparam>OldestFull/3600</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>OldestIncrementHours</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>expression</postprocessormethod>
            <postprocessorparam>OldestIncrement/3600</postprocessorparam>
            <usevalue></usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Newest Simple Restore Point (Instance)</name>
            <title>Newest Simple Restore Point (Instance)</title>
            <verticallabel>Hours</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1week</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>NewestIncrementHours</name>
            <datapointname>NewestIncrementHours</datapointname>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>NewestIncrementHours</legend>
                <color>silver</color>
                <datapointname>NewestIncrementHours</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        <overviewgraph>
            <name>Newest Simple Restore Points</name>
            <title>Newest Simple Restore Points</title>
            <verticallabel>Hours</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1week</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <datapoints>
        <overviewgraphdatapoint>
            <name>NewestIncrementHours</name>
            <datapointname>NewestIncrementHours</datapointname>
            <cf>1</cf>
            <aggregateMethod>average</aggregateMethod>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>1</type>
                <legend>##INSTANCE##</legend>
                <datapointname>NewestIncrementHours</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>AUTO</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
